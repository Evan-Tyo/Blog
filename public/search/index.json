[{"content":" Overview\rDocumenting my process in creating a connection between GitHub and GitLab.\nThis will allow for a CI/CD pipeline between a GitHub repository and a GitLab project.\nPrerequisites\rFollow the steps outlined on the Setting Up Gitlab page.\nCreate a GitLab account with at least one group Have a GitHub account with at least one repository Using the group, a project will be created and connected to an external GitHub repository.\nIt will be used to configure a CI/CD pipeline between the GitHub repository and the GitLab project.\nGitHub: Creating a personal access token\rNavigate to the github personal access tokens page.\nToken Creation\rEnter a description in the note section Choose an expiration time Select \u0026ldquo;repo\u0026rdquo; under the scopes section Select \u0026ldquo;admin:repo_hook\u0026rdquo; under the scopes section When a token reaches the expiration time the token will no longer work.\nA new token will then need to be created and setup in order for the connection to continue.\nGitLab: Creating a project\rNavigate to the gitlab home page.\nProject Creation\rClick Projects on the left sidebar Click the Create new project button Click the Run CI/CD for external repository button Click the Repository by URL button Add a Git Repository URL Add a Username (optional) Add a Password (optional) Set a Project name Set a Project slug Provide a Project description (optional) Pick a Visibility level When finished, click the Create project button Subsection 2\rContent\nGitHub: Adding a CI/CD config file\rInformation about this section\nSubsection 1\rContent\nSubsection 2\rContent\nSection 2\rInformation about this section\nSubsection 1\rContent\nSubsection 2\rContent\nSummary\rSummary list of this page\nReferences\rA comprehensive list of page references\nSection 1\rList of section items\nSection 2\rList of section items\nSetting Up Gitlabs tutorial config info ","date":"2024-09-25T16:20:36-04:00","permalink":"http://localhost:1313/setup/connect-github-and-gitlab/","title":"Connect Github and Gitlab"},{"content":"\rOverview\rDocumenting my process in deploying to a GitLab account.\nThis will follow a GitLab deployment using CI/CD from a GitHub repository.\nPrerequisites\rFollow the steps outlined on the Setting Up Gitlab page.\nCreate a GitLab account Have a group created Have a project created The project being used has been connected to an external GitHub repository upon creation.\nIt will be used to configure a CI/CD pipeline between the GitHub repository and the GitLab project.\nSection 1\rInformation about this section\nSubsection 1\rContent\nSubsection 2\rContent\nSection 2\rInformation about this section\nSubsection 1\rContent\nSubsection 2\rContent\nSummary\rSummary list of this page\nReferences\rA comprehensive list of page references\nSection 1\rList of section items\nSection 2\rList of section items\nSetting Up Gitlabs ","date":"2024-07-13T23:52:04-04:00","permalink":"http://localhost:1313/setup/deploying-to-gitlabs/","title":"Deploying to Gitlabs"},{"content":"\rOverview\rDocumenting my process in setting up a GitLab account, creating a Group, and creating a Project.\nIncludes additional information on Groups and Projects.\nPrerequisites\rNavigate to the host on gitlab page.\nHave familiarity with Git versioning Complete Hugo Quick Start Completing the hugo quick start tutorial will produce a local, ready to publish, Hugo website.\nIf this has not been completed, take a look at my Setting Up Hugo page for more information.\nCreating A GitLab Account\rNavigate to the gitlab home page.\nAccount Creation\rClick the Sign in button on the top right Click the Register now button under \u0026ldquo;Sign in\u0026rdquo; Enter your account information and click the Register button Locate the code sent to your registered email Enter the code to complete account creation You should now have an account set up with GitLab.\nGitLab will immediately ask if you want to create, or import, a new Group and a new Project.\nGroups and Projects will be explained in more detail in the following sections.\nUnderstanding Groups and Projects\rThis section is meant to briefly explain what Groups and Projects are.\nGroups\rGroups are used to categorize one or more projects together that have a shared purpose.\nThere are many different ways to structure a group, but there is no single correct way.\nHere are a few common group structures:\nSimple: One group including all projects Team: Each team has their own group Client: Each client has their own group Functionality: Each functionality has it\u0026rsquo;s own group Using groups allows for:\nManaging permissions for projects included in the group Viewing all issues, requests, and analytics for projects in the group Communicate with all group members within a group Creating subgroups for additional structuring There are two options for creating a group:\nCreate Group: Design a group from scratch Import Group: Pull in a group from another GitLab instance For more details involving groups navigate to the GitLab Groups page.\nProjects\rProjects are used to host the data related to the associated development work.\nThey provide a variety of great benefits to help streamline the development process.\nUsing projects allows for:\nCollaboration between project members Version control for more secure releases Project management to assist with planning The use of a dedicated environment While all projects have the same functionality, there are different ways to create a project.\nA few ways to create a project are by:\nCreating a blank project Using a template Utilizing Git push Including SHA-256 hashing For more general details involving projects navigate to the GitLab Projects page.\nAdditionally, the GitLab Create a Project page provides more information on project creation.\nCreating Groups and Projects\rNavigate back to the gitlab home page.\nSign in, if not already, and the page will redirect to the account\u0026rsquo;s projects page.\nThis is where Groups and Projects can be created.\nGroup Creation\rThe following steps outline my process in creating a group.\\\nSteps to create a group:\nMore details on each field will be listed below.\nClick the Create a group button Click the Create group button Choose a Group name Choose a Group URL Pick a Visibility level Add a Role Pick who will be using this group Choose what will you use this group for When finished, click the Create group button Brief details on each field:\nField Details Group name The name of the group. Some are reserved names. Group URL ( Namespace ) The path for the group. If not specified, it will use the group name. Visibility Level Limits who has group access. Private, Internal, or Public visibility. Add your Role Team Role or Job Title. Who will be using this group For company, team, or personal use. What will you use this group for Choose from a selection of generalized uses. Project Creation\rThe following steps outline my process in creating a project.\nFor my purposes, I\u0026rsquo;ll be connecting this project to an external GitHub repository.\nSteps to create a project:\nMore details on each field will be listed below.\nClick the Create new project button Click the Run CI/CD for external repository button Click the Repository by URL button Add a Git Repository URL Add a Username (optional) Add a Password (optional) Set a Project name Set a Project slug Provide a Project description (optional) Pick a Visibility level When finished, click the Create project button Brief details on each field:\nField Details Git repository URL For the git repository to be connected. Username If the git repository is not public, add the username. Password If the git repository is not public, add the password. Project name The name of the group. Some are reserved names. Project URL ( Namespace ) The path for the project. If not specified, it will use the group name. Project description An optional description for the project. Visibility Level Limits who has project access. Private, Internal, or Public visibility. Summary\rIn this document we:\nCreated a GitLab account Briefly discussed groups and projects Created a new Group Created a new Project Thank you for following along and I hope this document was helpful!\nReferences\rA comprehensive list of page references\nHugo\rHugo Quick Start Setting Up Hugo GitLab Documents\rHosting on GitLab GitLab Home Page GitLab Groups / Projects\rGitLab Groups GitLab Projects GitLab Create a Project Group and Project Reserved Names Group Namespace Group Visibility Level ","date":"2024-06-10T20:51:59-04:00","permalink":"http://localhost:1313/setup/setting-up-gitlabs/","title":"Setting Up GitLab"},{"content":" Overview\rExamples of Markdown elements supported by Hugo.\nHighlight, Subscript, and Superscript are not supported elements.\nHTML is supported but is not included on this page.\nH1 heading\r1 # H1 heading H2 heading\r1 ## H2 heading H3 heading\r1 ### H3 heading H4 heading\r1 #### H4 heading H5 heading\r1 ##### H5 heading H6 heading\r1 ###### H6 heading bold text\n1 **bold text** italicized text\n1 *italicized text* blockquote\n1 \u0026gt; blockquote Ordered List\nFirst Second Third 1 2 3 1. First 2. Second 3. Third Unordered List\nFirst Second Third 1 2 3 - First - Second - Third Line of Code\n1 `Line of Code` Horizontal Rule\n1 --- Link\n1 [Link](/posts/markdown-example) Image\nGif\n1 2 ![Sora Standing Sprite](/img/soraStand.png)\\ ![Sora Side Sprite](/gifs/soraRun.gif) Table With No Lines One Two Three Four Plus Minus Up Down Ha He Ho Hi 1 2 3 4 5 | Table | With | No | Lines | | ----- | ----- | ----- | ----- | | One | Two | Three | Four | | Plus | Minus | Up | Down | | Ha | He | Ho | Hi | Fenced Code Block\n1 2 3 ``` Fenced Code Block ``` Footnote. 1\n1 2 Footnote. [^1] [^1]: First footnote example. Heading with ID\rLink to heading with ID\n1 2 ### Heading with ID {#some-id} [Link to heading with ID](#some-id) Definition List First definition Second definition 1 2 3 Definition List : First definition : Second definition Strikethrough\n1 ~~Strikethrough~~ Task List\nThe First Task The Second Task The Third Task 1 2 3 4 Task List - [x] The First Task - [ ] The Second Task - [ ] The Third Task Emoji \u0026#x1f604;\n1 Emoji :smile: References\rHugo Markdown Support Commonmark Cheat Sheet Markdown Cheat Sheet Markdown Extended Syntax Configure Markup Emojis Shortcode First footnote example.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2024-06-07T22:41:27-04:00","permalink":"http://localhost:1313/documents/markdown-example/","title":"Markdown Example"},{"content":"\rOverview\rDocumenting my process in setting up Hugo.\nIncludes additional information on Content Front Matter and Markdown.\nPrerequisites\rNavigate to the hugo quick start page.\nInstall Hugo Install Git Git and GitBash were already installed prior to hugo setup.\nInstalling Hugo\rNavigate to the hugo installation page for windows.\nI opted for the extended edition of hugo Git was already installed Go was then installed in order to use Hugo Modules Dart Sass was not installed, but might be at a later time Go installation Page\nI used the Package Manager option for downloading the extended edition of hugo.\nScoop was installed The command scoop install hugo-extended was ran Scoop installation Page\nHugo was now installed\nCreating a site\rNavigate back to the hugo quick start page.\nIt is recommended not to use Command Prompt or Windows PowerShell for hugo setup.\nI decided to use Git Bash as it was already installed.\nThese are the recommended commands to run for quickly setting up an example hugo site:\n1 2 3 4 5 6 hugo new site quickstart cd quickstart git init git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke echo \u0026#34;theme = \u0026#39;ananke\u0026#39;\u0026#34; \u0026gt;\u0026gt; hugo.toml hugo server By running these commands:\nA new project will be created It will be initialized as a git repository The \u0026lsquo;ananke\u0026rsquo; theme 1 will be downloaded The hugo server will be ran I named my site \u0026lsquo;blog\u0026rsquo; rather than \u0026lsquo;quickstart\u0026rsquo; but otherwise I ran the same commands.\n1 2 hugo new site blog ... Add Content\rThe following command will add a new page to the site.\n1 hugo new content posts/my-first-post.md This command will create two things:\nA posts directory, if one does not already exist A markdown file titled \u0026ldquo;My First Post\u0026rdquo; Multiple pages can be created if running the command again but with a different page name.\nFor instance, I ran the following which created two pages under my posts directory:\n1 2 hugo new content posts/setting-up-hugo.md hugo new content posts/notes.md Front Matter\rOpen any one of the page files. Notice there are a few auto populated fields at the top of each file.\nThese fields compose the Front Matter, which is used to add metadata to the page.\n1 2 3 4 5 +++ title = \u0026#39;Setting Up Hugo\u0026#39; date = 2024-06-01T16:03:07-04:00 draft = true +++ The title and date fields add their respective details to the page.\nThe draft field is used to tell hugo whether or not this page is a draft.\nBy default, draft pages are not published when the site gets built.\nMore fields can be added to the Front Matter but for now these are the default fields.\nMarkdown\rMarkdown is the primary language for formatting the .md files used for these pages.\nCheck out the Markdown Getting Started guide for more information.\nIn Hugo we\u0026rsquo;ll mostly be using Markdown. However, using HTML is also an option. This would allow us to use JavaScript through script tags, use CSS through style tags, handle additional formatting, and more. By default, HTML is unavailable but we are able to use other markdown processors in order to enable it. I\u0026rsquo;ll include how I did that in a separate post.\nI created a Markdown Example page with examples of markdown formatting.\nAdding Markdown\rAdd some markdown to the nearly created page file.\nMake sure to keep draft = true while working on a draft page.\nHere is an example of what I added from the top of this page.\n1 2 3 4 5 6 7 8 9 10 11 12 +++ title = \u0026#39;Setting Up Hugo\u0026#39; date = 2024-06-01T16:03:07-04:00 draft = true +++ # Prerequisites Navigate to the [hugo quick start page](https://gohugo.io/getting-started/quick-start/) - [Install Hugo](https://gohugo.io/installation/windows/) - [Install Git](https://www.git-scm.com/download/win) Git and GitBash were already installed prior to hugo setup. Run the Server\rSave the changes and start the Hugo development server.\nTo include draft pages run either of the following commands:\n1 2 hugo server --buildDrafts hugo server -D To exclude draft pages run the following command:\n1 hugo server The site URL will be printed in the terminal.\nNavigate to the site and continue working while keeping the server running. The site will update live as changes are made.\nFrom the Hugo Quick Start page:\nHugo’s rendering engine conforms to the CommonMark specification for Markdown. The CommonMark organization provides a useful live testing tool powered by the reference implementation.\nConfigure the Site\rAt the root of this project, open the hugo.toml file. This file handles the hugo configuration fields for the site.\nIt was auto generated when we ran the hugo new site command in the Creating a Site section of this page.\nThese are the base fields added to the file:\n1 2 3 4 baseURL = \u0026#39;https://example.org/\u0026#39; languageCode = \u0026#39;en-us\u0026#39; title = \u0026#39;My New Hugo Site\u0026#39; theme = \u0026#39;ananke\u0026#39; It is recommended to change the following fields when starting:\nbaseUrl: Must begin with the protocol and end with a slash. Customize it however desired. languageCode: Set this to your local language and region or a desired one. title: Update this to reflect on your site as the main title. Here are the values I currently have in my configuration file:\n1 2 3 4 5 baseURL = \u0026#39;https://tyotalks.org/\u0026#39; languageCode = \u0026#39;en-us\u0026#39; title = \u0026#39;Tyo Talks\u0026#39; theme = \u0026#39;diary\u0026#39; enableEmoji = true Notice I changed the theme 1 and added a new field to enable emojis.\nTo see the changes take effect, start the server once again.\n1 hugo server -D Publish the Site\rIn order to deploy the site it will first need to be published.\nPublishing the site and deploying the site are not the same thing.\nTo publish the site run the following command:\n1 hugo When you publish your site:\nThe entire static site gets created in the public directory Draft, future, or expired pages should not be included Summary\rIn this document we:\nInstalled Hugo and software Created a new site project Added page content to the site Briefly discussed front matter Introduced markdown Added markdown to a page Ran the local server Configured the site Published the site Thank you for following along and I hope this document was helpful!\nReferences\rA comprehensive list of page references\nHugo Documents\rHugo Quick Start Hugo Modules Front Matter Configure Hugo Draft, Future, and Expired Content Hugo Methods\rTitle Page Method Date Page Method Draft Page Method BaseURL Site Method Language Site Method Title Site Method Markdown\rMarkdown Getting Started Markdown Example CommonMark Specification CommonMark Live Testing Tool Installs\rInstall Hugo Install Go Install Scoop Install Git The chosen theme can easily be changed later. I changed my theme to the diary theme, but I\u0026rsquo;ll have a separate post explaining that process. To start, it\u0026rsquo;s worth getting familiar with the ananke theme.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2024-06-01T16:03:07-04:00","permalink":"http://localhost:1313/setup/setting-up-hugo/","title":"Setting Up Hugo"}]